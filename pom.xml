<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>es.udc.rs.telco</groupId>
	<artifactId>rs-telco</artifactId>
	<packaging>pom</packaging>
	<version>1.0.0</version>
	<name>RS-telco Project</name>

	<modules>
		<module>rs-telco-model</module>
		<module>rs-telco-service</module>
		<module>rs-telco-client</module>
	</modules>

	<!-- =================================================================== -->
	<!-- Default values for properties. These default values are expected to 
		be valid for most profiles. Specific profiles can overwrite values when necessary. -->
	<properties>
		<!-- Encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Package versions (except those defined in "profiles" section) -->
		<jdom2.version>2.0.6</jdom2.version>
		<jersey.version>2.26</jersey.version>
		<jaxb.version>2.3.0</jaxb.version>
		<wsUtil.version>3.2.4</wsUtil.version>
		<junit.version>4.12</junit.version>

		<!-- Plugin versions -->
		<mavenCompilerPlugin.version>3.7.0</mavenCompilerPlugin.version>
		<mavenResourcesPlugin.version>3.1.0</mavenResourcesPlugin.version>
		<execMavenPlugin.version>1.6.0</execMavenPlugin.version>
		<!--  <sqlMavenPlugin.version>1.5</sqlMavenPlugin.version> -->
		<mavenAssemblyPlugin.version>3.1.0</mavenAssemblyPlugin.version>
		<jettyMavenPlugin>9.4.9.v20180320</jettyMavenPlugin>
		<jaxwsMavenPlugin>2.5</jaxwsMavenPlugin>
		<jaxb2MavenPlugin>2.4</jaxb2MavenPlugin>
		<propertiesMavenPlugin>1.0.0</propertiesMavenPlugin>
	</properties>

	<!-- ========================================================== -->
	<!-- Profiles -->
	<profiles>
		<profile>
			<id>win</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<properties>
				<tool.wsgen>${java.home}/../bin/wsgen.exe</tool.wsgen>
			</properties>
		</profile>
		<profile>
			<id>nix</id>
			<activation>
				<os>
					<family>!windows</family>
				</os>
			</activation>
			<properties>
				<tool.wsgen>${java.home}/../bin/wsgen</tool.wsgen>
			</properties>
		</profile>
	</profiles>
	
	<!-- ========================================================== -->
	<!-- Additional repositories -->
	<repositories>
	</repositories>

	<!-- ========================================================== -->
	<!-- Dependency management -->
	<dependencyManagement>
		<dependencies>
			<!-- JUnit -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			<!-- JAXB versions necessary for the Jersey JSON support to work -->
			<dependency>
				<groupId>javax.xml.bind</groupId>
				<artifactId>jaxb-api</artifactId>
				<version>${jaxb.version}</version>
			</dependency>
			<dependency>
				<groupId>com.sun.xml.bind</groupId>
				<artifactId>jaxb-impl</artifactId>
				<version>${jaxb.version}</version>
			</dependency>
			<dependency>
				<groupId>com.sun.xml.bind</groupId>
				<artifactId>jaxb-core</artifactId>
				<version>${jaxb.version}</version>
			</dependency>
			<!-- WS-JavaExamples Util -->
			<dependency>
				<groupId>es.udc.ws</groupId>
				<artifactId>ws-util</artifactId>
				<version>${wsUtil.version}</version>
			</dependency>
			<!-- JDOM2 -->
			<dependency>
				<groupId>org.jdom</groupId>
				<artifactId>jdom2</artifactId>
				<version>${jdom2.version}</version>
			</dependency>
			<!-- Jersey server -->
			<dependency>
				<groupId>org.glassfish.jersey.containers</groupId>
				<artifactId>jersey-container-servlet</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<dependency>
				<groupId>org.glassfish.jersey.inject</groupId>
				<artifactId>jersey-hk2</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<dependency>
				<groupId>org.glassfish.jersey.core</groupId>
				<artifactId>jersey-common</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<!-- Jersey client -->
			<dependency>
				<groupId>org.glassfish.jersey.core</groupId>
				<artifactId>jersey-client</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<dependency>
				<groupId>org.glassfish.jersey.media</groupId>
				<artifactId>jersey-media-jaxb</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<!-- Jersey JSON support -->
			<!-- MOXy -->
			<dependency>
				<groupId>org.glassfish.jersey.media</groupId>
				<artifactId>jersey-media-moxy</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<!-- Jettison -->
     		<dependency>
            	<groupId>org.glassfish.jersey.media</groupId>
    			<artifactId>jersey-media-json-jettison</artifactId>
				<version>${jersey.version}</version>
        	</dependency>
			<!-- telco Model -->
			<dependency>
				<groupId>es.udc.rs.telco</groupId>
				<artifactId>rs-telco-model</artifactId>
				<version>${project.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>

		<!-- =============================================================== -->
		<!-- Filtering -->
		<resources>

			<!-- Consider resources the files in src/main/resources, without applying 
				filtering. -->
			<resource>
				<directory>src/main/resources</directory>
			</resource>

			<!-- Consider resources Jetty configuration files which do not require 
				filtering -->
			<resource>
				<directory>../src/main/jetty</directory>
				<includes>
					<include>jetty-context.xml</include>
				</includes>
				<targetPath>../jetty</targetPath>
			</resource>

			<!-- Filter Jetty configuration -->
			<resource>
				<directory>../src/main/jetty</directory>
				<includes>
					<include>jetty-env.xml</include>
				</includes>
				<targetPath>../jetty</targetPath>
				<filtering>true</filtering>
			</resource>
			
		</resources>

		<testResources>

			<!-- Consider resources the files in src/test/resources, without applying 
				filtering. -->
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>

		</testResources>


		<plugins>

			<!-- ========================================================== -->
			<!-- Compiler configuration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${mavenCompilerPlugin.version}</version>
				<configuration>
					<verbose>true</verbose>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>${project.build.sourceEncoding}</encoding>
					<showDeprecation>true</showDeprecation>
					<showWarnings>true</showWarnings>
				</configuration>
			</plugin>

			<!-- ========================================================== -->
			<!-- Resources plugin -->
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${mavenResourcesPlugin.version}</version>
			</plugin>

  			<!-- ========================================================== -->
			<!-- Exec plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${execMavenPlugin.version}</version>
			</plugin>
			<!-- ========================================================== -->
			<!-- Assembly configuration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>${mavenAssemblyPlugin.version}</version>
				<configuration>
					<descriptors>
						<descriptor>src/main/assembly/src.xml</descriptor>
					</descriptors>
				</configuration>
			</plugin>

			<!-- ========================================================== -->
			<!-- Jetty configuration -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jettyMavenPlugin}</version>

				<configuration>
                    <httpConnector>
                        <port>7070</port>
                    </httpConnector>
					<contextXml>target/jetty/jetty-context.xml</contextXml>
					<webAppConfig>
						<contextPath>/${project.artifactId}</contextPath>
						<jettyEnvXml>target/jetty/jetty-env.xml</jettyEnvXml>
					</webAppConfig>
					<reload>manual</reload>
				</configuration>
			</plugin>
			
			<!-- ========================================================== -->
			<!-- Properties configuration -->
			<!-- This plugin is used to ensure that the usage of the maven-jaxb2-plugin 
				is JDK 8 compatible in absence of a fix for https://java.net/jira/browse/MAVEN_JAXB2_PLUGIN-80. 
				Mojo's JAXB-2 Maven Plugin fails (xjc goal) with JDK 1.8 because JAXP has 
				been upgraded to 1.5, and it introduces access issues on external resources. 
				It can be solved setting the value of the system property javax.xml.accessExternalSchema 
				to a value that allows accessing to external file resources (see https://jira.codehaus.org/browse/MJAXB-89) -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>${propertiesMavenPlugin}</version>
				<executions>
					<execution>
						<id>set-additional-system-properties</id>
						<goals>
							<goal>set-system-properties</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<properties>
						<property>
							<name>javax.xml.accessExternalSchema</name>
							<value>file,http</value>
						</property>
					</properties>
				</configuration>
			</plugin>

		</plugins>

		<!-- ========================================================== -->
		<!-- Prevent m2eclipse plugin to mark projects as invalid -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>jaxws-maven-plugin</artifactId>
										<versionRange>[1.0.0,)</versionRange>
										<goals>
											<goal>wsgen</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<!-- Add the goal set-system-properties of the plugin properties-maven-plugin 
									to be executed in the m2eclipse lifecycle -->
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>properties-maven-plugin</artifactId>
										<versionRange>[${propertiesMavenPlugin},)</versionRange>
										<goals>
											<goal>set-system-properties</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

			</plugins>
		</pluginManagement>

	</build>

</project>
